{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#culling-abstacts-for-relevancy-in-teams","title":"Culling Abstacts for Relevancy in Teams","text":"<p><code>CART</code> provides a way for teams of researchers to \"cull\" through a large set of papers when conducting a systematic review\u2014also known as an SoK. <code>CART</code> uses <code>ngrok</code> (a free service for temporary website creation), to zero-step the startup time for collaborative relevancy checking. <code>CART</code> also tries to foster efficient paper reviewing by gamifying the reviewing process (e.g., creating periodic rewards for achievements) and prioritizing data preservation (e.g., storing data in single CSV files instead of a database because these files are more easily inspected and corrected).  </p>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation for CART is available on Read the Docs.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We're thrilled that you'd like to contribute! Please review our contributing notes and note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.</p>"},{"location":"#demo","title":"Demo","text":""},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. </p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project manager at nathan.reitinger@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project manager is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"CONTRIBUTING/","title":"CONTRIBUTING","text":""},{"location":"CONTRIBUTING/#contributing","title":"Contributing","text":"<p>Hi there! We're thrilled that you'd like to contribute to this project. </p> <p>Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.</p>"},{"location":"CONTRIBUTING/#issues-and-prs","title":"Issues and PRs","text":"<p>If you have suggestions for how this project could be improved, or want to report a bug, open an issue! We'd love all and any contributions. If you have questions, too, we'd love to hear them.</p> <p>We'd also love PRs. If you're thinking of a large PR, we advise opening up an issue first to talk about it, though! Look at the links below if you're not sure how to open a PR.</p>"},{"location":"CONTRIBUTING/#submitting-a-pull-request","title":"Submitting a pull request","text":"<ol> <li>Fork and clone the repository.</li> <li>Configure and install the dependencies: <code>pip3 install -r requirements.txt</code>.</li> <li>Create a new branch: <code>git checkout -b my-branch-name</code>.</li> <li>Make your change, add tests, and make sure the tests still pass.</li> <li>Push to your fork and submit a pull request.</li> <li>Pat your self on the back and wait for your pull request to be reviewed and merged.</li> </ol>"},{"location":"CONTRIBUTING/#resources","title":"Resources","text":"<ul> <li>How to Contribute to Open Source</li> <li>Using Pull Requests</li> <li>GitHub Help</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>The following figure provides a high-level overview of<code>CART</code>.<sup>1</sup> <code>CART</code> consists of two primary perspectives: </p> <p> Serverland , where the Flask app running <code>cart.py</code> </p> <p> Userland, where a user who is logged in votes on papers. </p> <p></p>"},{"location":"architecture/#serverland","title":"Serverland","text":"<p>After initiating <code>cart.py</code> by passing in a set of team members (<code>-c</code>) and utilizing optional configurations, a Flask app is created (either localhost or <code>ngrok</code>) that will look to serve \"eligible\" papers found in the <code>abstracts/</code> folder. These papers are assumed to be in CSV format with a specific set of columns. Papers are stored as separate <code>.csv</code> files to enable ease of investigation when unexpected behavior occurs and error isolation (e.g., a mistake in voting on one abstract affects no other abstracts).   </p>"},{"location":"architecture/#userland","title":"Userland","text":"<p>Users who are logged in will be served one paper at a time, and asked to vote on whether the paper's title and abstract are relevant to the researchers' goals. The user will be automatically directed to the home screen after logging in. The display of paper information on the home screen has been gamified, both in terms of a rewards system based on votes cast and by letting users set their own goals with a progress bar (see also gamification). The reviewing view also has a few other features for ease of vote casting (e.g., keystroke voting). </p> <p>Other web pages in userland include the team's progress (how many papers have been voted on), history (the last 50 papers you voted on, including the ability to change a vote), about the project (user-editable guidelines for voting), and account information (for logging in and out). </p> <p></p> <p>Finally, it is notable that <code>CART</code> keeps track of \"opened\" abstracts in order to accommodate a come-and-go reviewing process. Once a vote is cast, <code>CART</code> will update the paper by logging the vote. This process (noted with red arrows in the architecture figure above) will cycle in a loop until eligible abstracts cease to exist. </p>"},{"location":"architecture/#eligibility","title":"Eligibility","text":"<p>In serverland, <code>cart.py</code> makes a decision (in a loop until no eligible papers exist) on which paper to serve by checking the following rules: </p> Rule Comment The user has not seen this abstract If a user has already voted on an abstract, do not re-serve the abstract. Abstract votes for this paper are currently less than the number of votes required for each paper Only serve an abstract to a user if the abstract needs another vote. If a paper has been voted on before, and the total number of votes is at the total required per project (e.g., \"at least three members of the team must vote on each paper\"), then do not serve this abstract. Abstract is not flagged as 'not-a-paper' Papers are most commonly gathered through an automated process, and these automated processes are not perfect (i.e., the paper set researchers cull through may include papers that are not papers: proceeding papers, PhD dissertation papers, or ACM viewpoint papers). Depending on a project's goals, team members may wish to flag a paper so that multiple people do not need to review them. This flag effectuates that. Once marked, these papers will not be served to any other members. Abstract is not \"open\" by another user Team members are very likely to start reading an abstract and then fail to submit a vote on the paper. <code>CART</code> accommodates this situation by initially \"opening\" a paper, which means that no one else can review it while it is open and the user who opened it cannot move forward until it is closed."},{"location":"architecture/#optimization","title":"Optimization","text":"<p>Given that these types of projects can involve the review of thousands of papers, <code>CART</code> needs to be able to make decisions on paper eligibility quickly without reviewing the full set of papers. To accomplish this, <code>CART</code> keeps a local file as storage of opened papers and review counts. This allows a single read operation where a loop would have been used otherwise. </p>"},{"location":"architecture/#race-conditions","title":"Race Conditions","text":"<p>To prevent race conditions on opening papers or submitting votes, <code>CART</code> uses <code>filelock</code>. For more on this process, see https://py-filelock.readthedocs.io/en/latest/.</p> <ol> <li> <p>We refer to \"abstracts\" or \"papers\" interchangeably. Both refer to a single <code>.csv</code> file representing a paper found in the `/abstracts' folder\u00a0\u21a9</p> </li> </ol>"},{"location":"assumptions/","title":"Assumptions","text":"<p><code>CART</code> makes a few assumptions about the world. </p>"},{"location":"assumptions/#assumption-1-abstracts-exist","title":"Assumption #1: Abstracts exist","text":"<p><code>CART</code> assumes both that a folder of \"abstracts\" exists, and that within this folder are csv files with the following headings: <code>unique_id</code>,<code>review_count</code>,<code>url</code>,<code>title</code>,<code>abstract</code>,<code>user</code>,<code>vote</code>,<code>in_progress</code>,<code>time</code>. </p> <p>These columns adhere to the following properties:</p> column object type default value comment unique_id int (in csv as string) user supplied keeps track of each paper review_count int (in csv as string) 0 count of number of votes cast on this paper url string user supplied hyperlink for paper title string user supplied paper title (HTML permissible) abstract string user supplied paper abstract (HTML permissible) required to end with \"------endofabstract------xxxx\" where the xxxx is the unique_id of the paper user string none team member acting on entry vote string none what team member's vote is in_progress string no flag for team member opening abstract time string 1707541131.0723252 helpful when viewing latest actions <p>For example, the paper titled <code>6583.csv</code> would be a file that looks like this:</p> <pre><code>unique_id,review_count,url,title,abstract,user,vote,in_progress,time\n6583,\n0,\nhttps://www.usenix.org/conference/usenixsecurity20/presentation/wei,\n\"What Twitter Knows...\",\n\"Although targeted advertising...------endofabstract------6583\",\nnone,\nnone,\nno,\n1691766446.157932\n\n</code></pre>"},{"location":"assumptions/#getting-papers-a-demo","title":"Getting Papers: A DEMO","text":"<p>If you would like to see how populating the abstracts folder could look, you have a few options. The first option is copy some of the example files into the abstracts folder. </p> <p></p> <p>The second option is to run the demo scraper <code>get_data.py</code> located in the <code>sample_get_data</code> folder. If you run this file, you will be scraping paper titles and abstracts from the Privacy Enhancing Technologies Symposium for the year 2023. This script will create a new folder <code>/abstracts/-sample_from_scrape/SAMPLE_PETS_at_&lt;TIME GOES HERE&gt;/'</code>which will house the .csv files (numbered) that <code>CART</code> expects to see. You can then drag and drop these files to the <code>abstracts/</code> location and try them out. Researchers may choose to expand this scraping script to include more years and conferences when creating an initial batch of papers to review. </p> <p></p>"},{"location":"assumptions/#assumption-2-member-driven-server-is-ok","title":"Assumption #2: Member-Driven-Server-Is-OK","text":"<p>The second assumption made by <code>CART</code> is that one team member keeps <code>cart.py</code> running on their local machine for as long as the culling process takes. Although it is true that a viable alternative would be to point a server at <code>CART</code>, this depends on resources that are not typically freely accessible. Therefore, <code>CART</code> makes every effort possible to provide teams with a \"zero-step\" culling process. One team member initiates <code>CART</code> with the free <code>ngrok</code> service, allowing everyone to view and grade papers at their leisure. </p>"},{"location":"assumptions/#assumption-3-users-are-friendly","title":"Assumption #3: Users are friendly","text":"<p><code>CART</code> assumes (to use security terminology) that users are friendly, but curious. There is no strict login process because it is assumed that users are not going to be logging in with other usernames and making fraudulent votes. This is also helpful when an administrator needs to review votes cast by other members or debug (logging in as the other user helps reproduce the issue). </p>"},{"location":"development/","title":"Development","text":"<p>Hi there! We're thrilled that you'd like to contribute to this project. </p> <p>Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. We also have a set of  contributing guidelines, please look at them prior to working on this project.  </p>"},{"location":"development/#areas-for-improvement","title":"Areas for improvement","text":"Area Comment Mobile <code>CART</code> currently only works for desktop. GUI Running <code>cart.py</code> may benefit from a GUI that allows users to select options instead of passing in flags. Login <code>CART</code> assumes users are honest and therefore does not require login passwords or other security-facing features. Some teams may prefer tooling that helps enforce access control, like logins with a password. Post-processing <code>CART</code> would benefit from a task that compiles all votes cast into a single csv file; currently, <code>CART</code> stores papers (as <code>.csv</code> files) with votes cast per user, but does not aggregate all of these into a single file for completion post-processing."},{"location":"development/#testing","title":"Testing","text":"<p>Testing scripts are found in the <code>/testing</code> folder. The <code>test.py</code> program</p> <pre><code>python3 test.py\n</code></pre> <p>will do the following:</p> <ul> <li>use Selenium for testing</li> <li>setup <code>CART</code> by moving test abstracts into the right folder</li> <li>abstracts will be moved into the <code>abstracts/-testing/</code> folder (and cleaned up when <code>test.py</code> exits) </li> <li>use a \"small\" set of abstracts</li> <li>login as a provided user and vote on 5 abstracts (<code>number_to_vote</code> argument)<ul> <li>checking login </li> <li>checking vote casting</li> <li>checking \"done\" or completed on all abstracts voted on</li> <li>teardown to reset abstracts</li> </ul> </li> <li>use a \"big\" set of abstracts </li> <li>login as a provided user and vote on 50 abstracts (<code>number_to_vote</code> argument)<ul> <li>checking login </li> <li>checking vote casting</li> <li>checking \"done\" or completed on all abstracts voted on</li> <li>teardown to reset abstracts</li> </ul> </li> <li>print results of tests to terminal </li> </ul>"},{"location":"gamification/","title":"Gamification","text":"<p><code>CART</code> attempts to gamify the abstract review process. The following figure highlights some of the features implemented in <code>CART</code> to encourage effective and thorough reviews of papers. </p> <p></p>"},{"location":"options/","title":"Options","text":"<p><code>CART</code> accommodates several means of tweaking the reviewing process.  </p>"},{"location":"options/#flags","title":"Flags","text":"Flag Use example Description Default -c <code>-c user1 -c user2 -c user3</code> [required] creates accounts for users (three from this example) user must supply -r <code>-r 3</code> [optional] how many members should vote on each paper 2 -p <code>-p 8080</code> [optional] what port will <code>CART</code> use 8081 -d <code>-d selected-crawdad-loved.ngrok-free.app</code> [optional] will tell <code>CART</code> to use <code>ngrok</code> on a static domain provided by <code>ngrok</code> -n <code>-n 12345</code> [optional] pass in <code>ngrok</code> authToken to use ngrok server (allows the app to be accessible beyond localhost) -cf <code>-cf 100</code> [optional] confetti will spray on the 100th graded paper per member (per this example) 50"},{"location":"quick_setup/","title":"Quick Setup","text":"<p>The following instructions need only be accomplished by the team member running the server. </p>"},{"location":"quick_setup/#install","title":"Install","text":"<pre><code>git clone https://github.com/nathanReitinger/CART\ncd CART\n</code></pre>"},{"location":"quick_setup/#requirements","title":"Requirements","text":"<p>conda (tested with conda 23.1.0)</p>"},{"location":"quick_setup/#anaconda3","title":"Anaconda3","text":"<pre><code>conda env create -f cart.yml\n</code></pre> <p>pip (tested with Python 3.10.0)</p>"},{"location":"quick_setup/#ubuntu","title":"Ubuntu","text":"<pre><code>apt-get update\napt install python3-pip\npip3 install -r requirements.txt\n</code></pre>"},{"location":"quick_setup/#windows","title":"Windows","text":"<pre><code>==&gt; Search for python3.n in Microsoft store\npip3 install -r requirements.txt\n</code></pre>"},{"location":"quick_setup/#macos","title":"MacOS","text":"<pre><code>==&gt; assume python3 is installed: brew install python3\npip3 install -r requirements.txt\n</code></pre>"},{"location":"quick_setup/#ngrok","title":"<code>ngrok</code>","text":"<p>Warning</p> <p><code>ngrok</code> is not required to run <code>CART</code> but is strongly recommended because it allows one team member to set up a server that can be accessible by any other team member (as opposed to localhost).</p> <ul> <li>Sign up: https://dashboard.ngrok.com/signup</li> <li>Get auth token: https://dashboard.ngrok.com/get-started/your-authtoken </li> <li>Get static page: free ngrok static domain</li> </ul> <p>OPTIONAL you can use your own server\u2014but in the spirit of free and open-source software, we assume a private server is not available. </p>"},{"location":"quick_setup/#getting-started","title":"Getting Started","text":"<p>Note</p> <p><code>CART</code> will assume that papers are represented as .csv files and that these files are found in the <code>abstracts/</code> folder.</p> <ul> <li>For quick setup, it is easiest to use the example abstracts. Copy the contents of <code>-example_data_big</code> or <code>-example_data_small</code> into the abstracts folder. The file structure should look like this:</li> </ul> <pre><code>.\n\u251c\u2500\u2500 abstracts\n\u2502   \u2502   1.csv // your abstracts go here\n\u2502   \u2502   2.csv // your abstracts go here\n\u2502   \u2502   ...\n\u2502   \u2514\u2500\u2500 ngrok_auth.txt\n</code></pre> <ul> <li>the <code>ngrok_auth.txt</code> file stores your authToken if you are using the <code>ngrok</code> flag. </li> </ul>"},{"location":"quick_setup/#localhost-testing-or-development","title":"localhost (testing or development)","text":""},{"location":"quick_setup/#example-1","title":"EXAMPLE 1","text":"<p>Start <code>CART</code> on localhost by passing in each team member <code>-c user1</code> and use default flags </p> <pre><code>python3 cart.py -c user1 -c user2\n</code></pre> <ul> <li>two coders (user1-2)</li> <li>defaults for all other flags </li> <li>e.g., two reviews will be required per abstract</li> <li>point your browser to the localhost address posted in the terminal, there you will find the login screen of the app. </li> </ul> <pre><code> * Serving Flask app 'cart'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on all addresses (0.0.0.0)\n * Running on http://127.0.0.1:8081 &lt;==================== address you want ***\n * Running on http://192.168.0.191:8081\nPress CTRL+C to quit\n * Restarting with watchdog (fsevents)\n\n#\n#\n# ,-. ,-. ,-. |- \n# |   ,-| |   |  \n# `-' `-^ '   `' \n#\n#\n\n * Debugger is active!\n * Debugger PIN: 760-158-545\n</code></pre>"},{"location":"quick_setup/#example-2","title":"EXAMPLE 2","text":"<p>Start <code>CART</code> on localhost by passing in team members, the port, and a confetti flag</p> <pre><code>python3 cart.py -c user1 -c user2 -p 8081 -cf 30\n</code></pre> <ul> <li>two coders (user1-2)</li> <li>port set to 8081</li> <li>if the OS finds that the port is being used, <code>CART</code> will exit (specify a new port or close the port in use)</li> <li>confetti spray set to 30 </li> </ul> <pre><code> * Serving Flask app 'cart'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on all addresses (0.0.0.0)\n * Running on http://127.0.0.1:8081  &lt;==================== address you want ***\n * Running on http://192.168.0.191:8081\nPress CTRL+C to quit\n * Restarting with watchdog (fsevents)\n\n#\n#\n# ,-. ,-. ,-. |- \n# |   ,-| |   |  \n# `-' `-^ '   `' \n#\n#\n\n * Debugger is active!\n * Debugger PIN: 760-158-545\n</code></pre>"},{"location":"quick_setup/#ngrok-teamwork","title":"<code>ngrok</code>  (teamwork)","text":""},{"location":"quick_setup/#example-1_1","title":"EXAMPLE 1","text":"<pre><code>python3 cart.py -c user1 -c user2 -c user3 -n 1l9nyS6lXovar....LECyV -cf 20\n</code></pre> <ul> <li>three coders (user1-3)</li> <li><code>ngrok</code> authToken \"1l9nyS6lXovar....LECyV\"</li> <li>confetti on every 20th vote submitted by a team member </li> <li>this will produce a random URL on each run of <code>CART</code></li> </ul> <p>Notification</p> <p>The following option allows team members to connect to the same domain each time, and <code>ngrok</code> offers static domains for free. </p>"},{"location":"quick_setup/#example-2_1","title":"EXAMPLE 2","text":"<pre><code>python3 cart.py -c user1 -c user2 -c user3 -d selected-crawdad-loved.ngrok-free.app -n 1l9nyS6lXovar....LECyV -cf 20\n</code></pre> <ul> <li>three coders (user1-3)</li> <li><code>ngrok</code> authToken \"1l9nyS6lXovar....LECyV\"</li> <li><code>ngrok</code> static domain <code>selected-crawdad-loved.ngrok-free.app</code> (use your own)</li> <li>confetti on every 20th vote submitted by a team member </li> <li>this will use the static URL for successive runs! </li> </ul>"}]}